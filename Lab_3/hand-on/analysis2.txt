Pros
設從Priority Queue把資料拉出來需要的時間是T_pull, 將資料傳出去的時間是T_send，若把Handling Message與Task Scheduling這兩個Task分開來做，則若同一時間有很多Message Arrived時，可以同時把不同的Topic分派給Thread Pool中不同的Thread。舉個例子：
假設今天Thread Pool有三個Thread，Priority Queue有3個Topic，則將三個Topic送到Subscriber在Decoupling的情況下花的最理想時間是T_pull + 3*T_send，因為Thread Pool會一個一個把Priority Queue的Topic拉出來，即使在其他Thread正在傳送Topic給Subscriber的時候。
但No de-coupling則必須要一個Topic從Priority Queue中拉出來並傳送給Subscriber後，才能在繼續從Priority Queue中拉出下一個Topic，因此他鎖需要的時間固定為3*(T_pull + T_send)。

Cons
Decoupling的壞處是需要讓Priority Queue在執行任何操作時都保證是Atomic的，亦即在其中一個Thread對其做Push, Pop, Top, Size, Empty等操作時，其他Thread不能存取該Priority Queue，因此會增加一點實作複雜度。
再加上實際上是由單一Writer將Broker的Topic傳送給Subscriber，因此在Writer要把Topic傳送給Subscriber時也需要是Atomic的。
